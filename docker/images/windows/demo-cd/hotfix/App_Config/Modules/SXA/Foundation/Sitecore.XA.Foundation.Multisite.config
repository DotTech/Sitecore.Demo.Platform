<?xml version="1.0" encoding="utf-8" ?>
<!--

Purpose: This include file enables and configures the Multisite foundation module.

The multitenant nature of the SXA architecture means that clients can run multiple microsites along with their main websites on a single instance of Sitecore.
Additionally each tenant is divided into sites allowing for entire customer journeys to be completed in various languages either through one-to-one translated versions (native Sitecore language support) or an internationalisation model whereby a separate site map exists for different languages.

To disable this file, change its extension to ".disabled".

-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore>
        <hooks>
            <hook type="Sitecore.XA.Foundation.Multisite.Hooks.SxaSiteRefresherHook, Sitecore.XA.Foundation.Multisite" />
        </hooks>
        <settings>
            <setting patch:instead="*[@name='BucketConfiguration.DynamicBucketFolderPath']" name="BucketConfiguration.DynamicBucketFolderPath" value="Sitecore.XA.Foundation.Multisite.Buckets.SiteBucketPathProvider, Sitecore.XA.Foundation.Multisite" />
            <setting name="XA.Foundation.Multisite.MultisiteContextCacheMaxSize" value="50MB" />
            <setting name="XA.Foundation.Multisite.MultisiteTokensCacheMaxSize" value="50MB" />
            <setting name="XA.Foundation.Multisite.SiteInfoResolverCacheMaxSize" value="50MB" />
            <setting name="XA.Foundation.Multisite.SharedSitesContextCacheMaxSize" value="50MB" />
            <setting name="XA.Foundation.Multisite.FallbackLinkProvider" value="localizedProvider" />
            <setting name="XA.Foundation.Multisite.SharedSitesContextCache.Enabled" value="true" />
            <setting name="XA.Foundation.Multisite.MultisiteContextCache.Enabled" value="true" />

            <!-- Environment name used by site provider to specify host name for each site definition.
      The default value is LIVE. -->
            <setting name="XA.Foundation.Multisite.Environment" value="LIVE" />
        </settings>
        <experienceAccelerator>
            <multisite>
                <!-- List of source item fields IDs that is used to determine whether linked items are used on any sites.
        If linked items are used, only the site specific html cache is cleared after publishing. -->
                <htmlCacheClearer>
                    <fieldID desc="IVirtualNode - AdditionalChildren">{390D6F29-E759-4888-AD04-E8FFCD857492}</fieldID>
                    <fieldID desc="Settings - Templates">{E8881464-38AF-4655-BE4A-EE10586578A2}</fieldID>
                </htmlCacheClearer>
            </multisite>
            <renderingVariants>
                <allowedTemplates>
                    <template name="Page">{3F8A6A5D-7B1A-4566-8CD4-0A50F3030BD8}</template>
                </allowedTemplates>
            </renderingVariants>
        </experienceAccelerator>
        <events>
            <event name="publish:end">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEnd" role:require="Standalone or ContentManagement"/>
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEnd" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SharedSitesContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEnd" />
                <handler patch:after="*[@type='Sitecore.Publishing.SmartHtmlCacheClearer, Sitecore.Kernel']" type="Sitecore.XA.Foundation.Multisite.EventHandlers.HtmlCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEnd" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SharedItemsPublicationHandler, Sitecore.XA.Foundation.Multisite" method="OnPublishEnd" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteInfoResolverCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEnd" />
            </event>
            <event name="publish:end:remote">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEnd" role:require="Standalone or ContentManagement"/>
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEndRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SharedSitesContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEndRemote" />
                <handler patch:after="*[@type='Sitecore.Publishing.SmartHtmlCacheClearer, Sitecore.Kernel']" type="Sitecore.XA.Foundation.Multisite.EventHandlers.HtmlCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEndRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteInfoResolverCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnPublishEndRemote" />

            </event>
            <event name="item:saved">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSaved" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSaved" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SharedSitesContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSaved" />
                <handler patch:after="*[@type='Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite']" type="Sitecore.XA.Foundation.Multisite.EventHandlers.HttpRoutesRefresher, Sitecore.XA.Foundation.Multisite" method="OnItemSaved" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteInfoResolverCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSaved" />
            </event>
            <event name="item:saved:remote">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSavedRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSavedRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SharedSitesContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSavedRemote" />
                <handler patch:after="*[@type='Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite']" type="Sitecore.XA.Foundation.Multisite.EventHandlers.HttpRoutesRefresher, Sitecore.XA.Foundation.Multisite" method="OnItemSavedRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteInfoResolverCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSavedRemote" />
            </event>
            <event name="item:renamed">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemRenamed" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SharedItemsRenamingHandler, Sitecore.XA.Foundation.Multisite" method="OnItemRenamed" />
            </event>
            <event name="item:renamed:remote">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemRenamedRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SharedItemsRenamingHandler, Sitecore.XA.Foundation.Multisite" method="OnItemRenamed" />
            </event>
            <event name="item:moved">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemMoved" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemMoved" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteTokensCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemMoved" role:require="ContentManagement or Standalone" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteInfoResolverCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemMoved" />
            </event>
            <event name="item:moved:remote">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemMovedRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteContextCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemMovedRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteTokensCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemMovedRemote" role:require="ContentManagement or Standalone" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteInfoResolverCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemMovedRemote" />
            </event>
            <event name="item:deleted">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSaved" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteTokensCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemDeleted" role:require="ContentManagement or Standalone" />
            </event>
            <event name="item:deleted:remote">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.SiteCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemSavedRemote" />
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteTokensCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemDeletedRemote" role:require="ContentManagement or Standalone" />
            </event>
            <event name="item:adding">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.VirtualMediaFolderValidator, Sitecore.XA.Foundation.Multisite" method="OnItemAdding" />
            </event>
            <event name="item:moving">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.VirtualMediaFolderValidator, Sitecore.XA.Foundation.Multisite" method="OnItemMoving" />
            </event>
            <event name="item:added">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteTokensCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemAdded" role:require="ContentManagement or Standalone" />
            </event>
            <event name="item:added:remote">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteTokensCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemAddedRemote" role:require="ContentManagement or Standalone" />
            </event>
            <event name="item:copied">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteTokensCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemCopied" role:require="ContentManagement or Standalone" />
            </event>
            <event name="item:copied:remote">
                <handler type="Sitecore.XA.Foundation.Multisite.EventHandlers.MultisiteTokensCacheClearer, Sitecore.XA.Foundation.Multisite" method="OnItemCopiedRemote" role:require="ContentManagement or Standalone" />
            </event>
        </events>
        <pipelines>
            <initialize>
                <processor patch:before="*[@type='Sitecore.Pipelines.Loader.LoadHooks, Sitecore.Kernel']" type="Sitecore.XA.Foundation.Multisite.Pipelines.Initialize.InitSiteManager, Sitecore.XA.Foundation.Multisite" resolve="true"/>
            </initialize>
            <httpRequestBegin>
                <processor patch:after="*[@type='Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel']" type="Sitecore.XA.Foundation.Multisite.Pipelines.HttpRequest.LocalizableUrlItemResolver, Sitecore.XA.Foundation.Multisite" resolve="true">
                    <CacheExpiration>5</CacheExpiration>
                </processor>
                <processor patch:instead="*[@type='Sitecore.ExperienceEditor.Pipelines.HttpRequest.ResolveContentLanguage, Sitecore.ExperienceEditor']" type="Sitecore.XA.Foundation.Multisite.Pipelines.HttpRequest.ResolveContentLanguage, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </httpRequestBegin>
            <httpRequestProcessed>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.HttpRequest.StoreSiteNameInCookie, Sitecore.XA.Foundation.Multisite" resolve="true" />
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.HttpRequest.FixMultitenancyEditMode, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </httpRequestProcessed>
            <resolveTokens>
                <processor patch:after="*[3]" type="Sitecore.XA.Foundation.Multisite.Pipelines.ResolveTokens.ResolveMultisiteTokens, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </resolveTokens>
            <itemWebApiRequest>
                <processor patch:after="*[@type='Sitecore.ItemWebApi.Pipelines.Request.ResolveScope, Sitecore.ItemWebApi']"
                    type="Sitecore.XA.Foundation.Multisite.Pipelines.ItemWebApiRequest.ResolveVirtualItems, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </itemWebApiRequest>
            <itemWebApiSearch>
                <processor patch:instead="*[@type='Sitecore.ItemWebApi.Pipelines.Search.SetRootItem, Sitecore.Speak.ItemWebApi']"
                    type="Sitecore.XA.Foundation.Multisite.Pipelines.ItemWebApiSearch.SetRootItem, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </itemWebApiSearch>
            <contentSearch.stripQueryStringParameters>
                <processor patch:before="*[@type='Sitecore.ContentSearch.Pipelines.StripQueryStringParameters.RemoveEmptySearches, Sitecore.ContentSearch']"
                    type="Sitecore.XA.Foundation.Multisite.Pipelines.StripQueryStringParameters.ResolveMultitenancyInMediaLibrary,Sitecore.XA.Foundation.Multisite" resolve="true" />
            </contentSearch.stripQueryStringParameters>
            <contentSearch.getGlobalLinqFilters>
                <processor patch:after="*[@type='Sitecore.ContentSearch.Pipelines.QueryGlobalFilters.ApplyGlobalLinqFilters, Sitecore.ContentSearch']"
                    type="Sitecore.XA.Foundation.Multisite.Pipelines.GetGlobalLinqFilters.ResolveMultitenancyInMediaLibrary,Sitecore.XA.Foundation.Multisite" resolve="true" />
            </contentSearch.getGlobalLinqFilters>
            <getRenderingDatasource>
                <processor patch:before="*[@type='Sitecore.Pipelines.GetRenderingDatasource.SetFallbackDatasourceLocations, Sitecore.Kernel']"
                    type="Sitecore.XA.Foundation.Multisite.Pipelines.GetRenderingDatasource.RestrictFallbackDatasourceLocations, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </getRenderingDatasource>
            <renderField>
                <processor patch:instead="*[@type='Sitecore.Pipelines.RenderField.GetLinkFieldValue, Sitecore.Kernel']"
                           type="Sitecore.XA.Foundation.Multisite.Pipelines.RenderField.GetLinkFieldValue, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </renderField>
            <getItemSourceInfo>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.GetItemSourceInfo.GetItemSourceInfo, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </getItemSourceInfo>
            <getContentEditorWarnings>
                <processor patch:before="*[1]" type="Sitecore.XA.Foundation.Multisite.Pipelines.GetContentEditorWarnings.DelegatedAreaWarning, Sitecore.XA.Foundation.Multisite" resolve="true" />
                <processor patch:before="*[@type='Sitecore.Pipelines.GetContentEditorWarnings.Notifications, Sitecore.Kernel']" type="Sitecore.XA.Foundation.Multisite.Pipelines.GetContentEditorWarnings.HideNotificationForDelegatedArea, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </getContentEditorWarnings>
            <getRootSourceItems>
                <processor patch:before="*[@type='Sitecore.Pipelines.GetRootSourceItems.ProcessItemIdOrPathSource, Sitecore.Kernel']" type="Sitecore.XA.Foundation.Multisite.Pipelines.GetRootSourceItems.ResolveTokenRelativeQuerySource, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </getRootSourceItems>
            <initializeManagers>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.InitializeManagers.InitializePushCloneManager, Sitecore.XA.Foundation.Multisite" resolve="true"/>
            </initializeManagers>
            <pushCloneChanges>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.PushCloneChanges.PushTemplateChange, Sitecore.XA.Foundation.Multisite"/>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.PushCloneChanges.ResetFields, Sitecore.XA.Foundation.Multisite"/>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.PushCloneChanges.PushLinksChanges, Sitecore.XA.Foundation.Multisite"/>
            </pushCloneChanges>
            <preAuthenticateRequest>
                <processor patch:instead="*[@type='Sitecore.Pipelines.PreAuthenticateRequest.SiteResolver, Sitecore.Kernel']" type="Sitecore.XA.Foundation.Multisite.Pipelines.PreAuthenticateRequest.SiteResolver, Sitecore.XA.Foundation.Multisite" resolve="true" />
            </preAuthenticateRequest>
            <renderContentEditor>
                <processor patch:before="*[1]" type="Sitecore.XA.Foundation.Editing.Pipelines.RenderContentEditor.InjectContentEditorScripts, Sitecore.XA.Foundation.Editing">
                    <scripts hint="list:addScriptResource">
                        <resource>/sitecore/shell/Applications/Content Manager/SxaVirtualMediaProtection.js</resource>
                    </scripts>
                </processor>
            </renderContentEditor>
            <group groupName="ExperienceEditor" name="ExperienceEditor">
                <pipelines>
                    <getPageEditorNotifications>
                        <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.GetPageEditorNotifications.DelegatedAreaNotification, Sitecore.XA.Foundation.Multisite" resolve="true" />
                    </getPageEditorNotifications>
                </pipelines>
            </group>
        </pipelines>
        <services>
            <register serviceType="Sitecore.XA.Foundation.Multisite.IMultisiteContext, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.MultisiteContext, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.ISharedSitesContext, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.SharedSitesContext, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.ISiteInfoResolver, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.SiteInfoResolver, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.ISiteMediaRootProvider, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.SiteMediaRootProvider, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.ISiteDefinitionParser, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.SiteDefinitionParser, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.SiteResolvers.IEnvironmentSitesResolver, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.SiteResolvers.EnvironmentSitesResolver, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.IEnvironmentSiteSortingService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.EnvironmentSiteSortingService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.IItemSourceInfoService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.ItemSourceInfoService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.IDelegatedAreaService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.DelegatedAreaService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.IPushCloneService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.PushCloneService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.IPushCloneCoordinatorService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.DelegatedAreaCoodinatorService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.IPushCloneHandlerService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.PushCloneHandlerService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.ILinkProviderService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.LinkProviderService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Abstractions.Configuration.IConfiguration`1[[Sitecore.XA.Foundation.Multisite.MultisiteConfiguration, Sitecore.XA.Foundation.Multisite]], Sitecore.XA.Foundation.Abstractions"
                      implementationType="Sitecore.XA.Foundation.Multisite.MultisiteConfigurationReader, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.ICrossSiteLinkingService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.CrossSiteLinkingService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
            <register serviceType="Sitecore.XA.Foundation.Multisite.Services.IAnnotationService, Sitecore.XA.Foundation.Multisite" implementationType="Sitecore.XA.Foundation.Multisite.Services.AnnotationService, Sitecore.XA.Foundation.Multisite" lifetime="Singleton"/>
        </services>
        <processors>
            <uiGetMasters>
                <processor patch:after="*[@type='Sitecore.Pipelines.GetMasters.GetItemMasters,Sitecore.Kernel']" type="Sitecore.XA.Foundation.Multisite.Processors.UiGetMasters.GetItemMasters, Sitecore.XA.Foundation.Multisite" />
            </uiGetMasters>
            <uiMoveItems>
                <processor patch:instead="*[@method='GetDestination' and @type='Sitecore.Shell.Framework.Pipelines.MoveItems,Sitecore.Kernel']" mode="on" type="Sitecore.XA.Foundation.Multisite.Processors.UiMoveItems.MoveItems, Sitecore.XA.Foundation.Multisite" method="ShowDialog" />
            </uiMoveItems>
            <uiCloneItems>
                <processor patch:instead="*[@type='Sitecore.Buckets.Pipelines.UI.BucketItemClone, Sitecore.Buckets']" mode="on"  type="Sitecore.XA.Foundation.Multisite.Pipelines.UiCloneItems.BucketItemClone, Sitecore.XA.Foundation.Multisite"  method="Execute"/>
                <processor patch:instead="*[@type='Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel' and @method='Execute']" mode="on" type="Sitecore.XA.Foundation.Multisite.Pipelines.UiCloneItems.CloneItems, Sitecore.XA.Foundation.Multisite" method="Execute" />
                <processor patch:instead="*[@type='Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel' and @method='RelinkClonedSubtree']" mode="on" type="Sitecore.XA.Foundation.Multisite.Pipelines.UiCloneItems.CloneItems, Sitecore.XA.Foundation.Multisite" method="RelinkClonedSubtree" />
                <processor patch:after="*[@type='Sitecore.Shell.Framework.Pipelines.CloneItems,Sitecore.Kernel' and @method='CheckLanguage']" type="Sitecore.XA.Foundation.Multisite.Pipelines.UiCloneItems.ConfirmDelegatedArea, Sitecore.XA.Foundation.Multisite" resolve="true"/>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.UiCloneItems.PopulateDelegatedArea, Sitecore.XA.Foundation.Multisite" resolve="true"/>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.UiCloneItems.ReplaceLinks, Sitecore.XA.Foundation.Multisite" resolve="true"/>
                <processor type="Sitecore.XA.Foundation.Multisite.Pipelines.UiCloneItems.ProtectClone, Sitecore.XA.Foundation.Multisite" resolve="true"/>
            </uiCloneItems>
            <uiDeleteItems>
                <processor patch:instead="*[@method='UncloneItems' and @type='Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel']" mode="on" type="Sitecore.XA.Foundation.Multisite.Pipelines.UiDeleteItems.DeleteItems, Sitecore.XA.Foundation.Multisite" method="UncloneItems" />
                <processor patch:instead="*[@method='CheckCloneLinks' and @type='Sitecore.Shell.Framework.Pipelines.DeleteItems,Sitecore.Kernel']" mode="on" type="Sitecore.XA.Foundation.Multisite.Processors.UiDeleteItems.CheckCloneAndDelegatedAreaLinks, Sitecore.XA.Foundation.Multisite" method="CheckCloneLinks"/>
            </uiDeleteItems>
        </processors>
        <dataviews>
            <dataview name="Master" >
                <patch:attribute name="assembly">Sitecore.XA.Foundation.Multisite</patch:attribute>
                <patch:attribute name="type">Sitecore.XA.Foundation.Multisite.Views.SxaDataView</patch:attribute>
            </dataview>
        </dataviews>
        <sites>
            <site name="service" virtualFolder="/sitecore/service" physicalFolder="/sitecore/service">
                <patch:attribute name="enableAnalytics">false</patch:attribute>
            </site>
        </sites>
        <siteManager defaultProvider="sitecore">
            <providers>
                <clear/>
                <add name="sitecore" type="Sitecore.Sites.SitecoreSiteProvider, Sitecore.Kernel" checkSecurity="false">
                    <providers hint="raw:AddProviderReference">
                        <reference patch:before="*[@name='config']" name="backend"/>
                        <reference patch:after="*[@name='config']" name="service"/>
                        <reference patch:instead="*[@name='config']" name="sxa"/>
                    </providers>
                </add>
                <add name="backend" type="Sitecore.XA.Foundation.Multisite.Providers.BackendSiteProvider, Sitecore.XA.Foundation.Multisite" inherits="config" checkSecurity="false"/>
                <add name="service" type="Sitecore.XA.Foundation.Multisite.Providers.ServiceSiteProvider, Sitecore.XA.Foundation.Multisite" inherits="config" checkSecurity="false"/>
                <add name="sxa" type="Sitecore.XA.Foundation.Multisite.Providers.SxaSiteProvider, Sitecore.XA.Foundation.Multisite" database="master" checkSecurity="false"/>
            </providers>
        </siteManager>
        <linkManager defaultProvider="sitecore">
            <patch:attribute name="defaultProvider">switchableLinkProvider</patch:attribute>
            <providers>
                <add name="switchableLinkProvider" type="Sitecore.XA.Foundation.Multisite.LinkManagers.SwitchableLinkProvider, Sitecore.XA.Foundation.Multisite"/>
                <add name="localizedProvider" type="Sitecore.XA.Foundation.Multisite.LinkManagers.LocalizableLinkProvider, Sitecore.XA.Foundation.Multisite" cacheExpiration="5" addAspxExtension="false" alwaysIncludeServerUrl="false" encodeNames="true" languageEmbedding="never" languageLocation="filePath" shortenUrls="true" useDisplayName="false"/>
            </providers>
        </linkManager>
        <controlSources>
            <source patch:before="*[@namespace='Sitecore.Shell.Applications.ContentEditor']" mode="on" namespace="Sitecore.XA.Foundation.Multisite.CustomFields.FieldTypes" assembly="Sitecore.XA.Foundation.Multisite" prefix="content"/>
            <source mode="on" namespace="Sitecore.XA.Foundation.Multisite.Controls" assembly="Sitecore.XA.Foundation.Multisite"/>
        </controlSources>
        <ui>
            <usings>
                <using id="Sitecore.XA.Foundation.Multisite">Sitecore.XA.Foundation.Multisite</using>
            </usings>
            <references>
                <reference id="Sitecore.XA.Foundation.Multisite">/bin/Sitecore.XA.Foundation.Multisite.dll</reference>
            </references>
        </ui>
        <commands>
            <command name="webedit:navigatetosource" type="Sitecore.XA.Foundation.Multisite.Commands.NavigateToSource, Sitecore.XA.Foundation.Multisite"/>
        </commands>
        <mvc>
            <precompilation>
                <assemblies>
                    <assemblyIdentity name="Sitecore.XA.Foundation.Multisite" />
                </assemblies>
            </precompilation>
        </mvc>
    </sitecore>
</configuration>

